# Package tweaks
- name: Faster dnf
  become: yes
  become_method: sudo
  ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: fastestmirror
    value: true

- name: Update pre-installed packages
  become: yes
  become_method: sudo
  dnf:
    name: '*'
    state: latest

- name: Basic packages
  become: yes
  become_method: sudo
  dnf:
    name:
    - "@C Development Tools and Libraries"
    - autojump
    - cargo
    - cmake
    - extra-cmake-modules
    # NOTE: before running emacs for the first time on a new system, make sure
    # .emacs.d holds only init.el. The other files in .emacs.d include
    # installed packages and old history. It is cleaner to reinstall. Keeping
    # the old history can be annoying if file paths are different on the new
    # system.
    - emacs
    - fzf
    - gh
    - git
    - npm
    - pandoc
    - patch
    - pv
    - python-unversioned-command
    - python3-devel
    - rclone
    - rustc
    - telnet
    - the_silver_searcher
    - timew
    - tmux
    - vim-enhanced
    state: latest

- name: dnf cleanup
  become: yes
  become_method: sudo
  dnf:
    autoremove: yes

- name: mamba
  block:
  - name: Check mamba already installed
    stat:
      path: '{{ ansible_env.HOME }}/.conda/bin/mamba'
    register: mamba_bin
  - name: Download mamba
    get_url:
      url: https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh
      dest: /tmp/mamba.sh
    when: mamba_bin.stat.exists == False
  - name: install mamba
    command: 'bash /tmp/mamba.sh -b -p  {{ ansible_env.HOME }}/.conda'
    args:
      creates: '{{ ansible_env.HOME }}/.conda/bin/mamba'
    when: mamba_bin.stat.exists == False
  - name: update mamba
    command: '{{ ansible_env.HOME }}/.conda/bin/mamba update -y mamba'
    register: mamba_update
    changed_when: mamba_update.stdout is not search("# All requested packages already installed.")

- name: npm
  block:
  - name: Set user npm prefix
    ini_file:
      path: '{{ ansible_env.HOME }}/.npmrc'
      section: null
      option: prefix
      value: '{{ ansible_env.HOME }}/.local/share/npm'
      mode: 0770
      no_extra_spaces: yes
  - name: Install npm modules
    npm:
      name: '{{ item }}'
      global: yes
      state: latest
    loop:
    - typescript

- name: Set up vim plugins
  block:
    - name: Check if vim-plug is installed
      stat:
        path: '{{ ansible_env.HOME }}/.vim/autoload/plug.vim'
      register: vimplug
    - name: Create vim autload directory
      file:
        path: '{{ ansible_env.HOME }}/.vim/autoload'
        state: directory
        mode: 0770
    - name: Download vim-plug
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: '{{ ansible_env.HOME }}/.vim/autoload/plug.vim'
        mode: 0660
      when: not vimplug.stat.exists
    - name: Check if vim-plug plugged directory exists
      stat:
        path: '{{ ansible_env.HOME }}/.vim/plugged'
      register: vimplugged
    - name: Install vim plugins
      command: 'vim -es -u {{ ansible_env.HOME }}/.vim/vimrc -i NONE -c "PlugInstall" -c "qa"'
      when: not vimplugged.stat.exists

- name: timewarrior plugin
  block:
    - name: Make timewarrior directories
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.timewarrior/weekly'
        mode: '0750'
        state: directory
    - name: Get timewarrior extension
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/wshanks/timewarrior-weekly/master/weekly.py
        dest: '{{ ansible_env.HOME }}/.timewarrior/extensions/weekly.py'
        mode: '0750'
