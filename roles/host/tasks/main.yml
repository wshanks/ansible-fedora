# Package tweaks
- name: Faster dnf
  become: yes
  become_method: sudo
  community.general.ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: fastestmirror
    value: true

- name: Update pre-installed packages
  become: yes
  become_method: sudo
  dnf:
    name: '*'
    state: latest

- name: Basic packages
  become: yes
  become_method: sudo
  dnf:
    name:
      # rootless docker
      - fuse-overlayfs
      # No flatpak for tweaks
      - gnome-tweaks
      - igt-gpu-tools
      - podman-compose
      # tmux in the container has trouble with terminal windows resizing and
      # makes it hard to pop up to a shell in the host
      - tmux
    state: latest

- name: Unneeded packages
  become: yes
  become_method: sudo
  dnf:
    name:
    - gnome-shell-extension-appindicator
    - gnome-shell-extension-background-logo
    state: absent

- name: dnf cleanup
  become: yes
  become_method: sudo
  dnf:
    autoremove: yes

- name: install yadm
  block:
    - name: clone yadm
      ansible.builtin.git:
        repo: 'https://github.com/TheLocehiliosan/yadm.git'
        dest: '{{ ansible_env.HOME }}/.local/installs/yadm'
        version: master
    - name: link yadm
      ansible.builtin.file:
        src: '{{ ansible_env.HOME }}/.local/installs/yadm/yadm'
        dest: '{{ ansible_env.HOME }}/bin/yadm'
        state: link
  tags: yadm

- name: yadm clone
  block:
    - name: Check if yadm is already cloned
      stat:
        path: '{{ ansible_env.HOME }}/.local/share/yadm/repo.git'
      register: yadmrepostat
    - name: Clone yadm
      command: 'yadm clone --checkout {{ yadm_repo }}'
      when: yadm_repo is defined and yadmrepostat.stat.exists == False
      args:
          creates: '{{ ansible_env.HOME }}/.local/share/yadm/repo.git'
    - name: Reset yadm
      command: 'yadm reset --hard'
      when: yadm_repo is defined and yadmrepostat.stat.exists == False
  tags: yadm

- name: pyadm clone
  block:
    - name: Check if pyadm is already cloned
      stat:
        path: '{{ ansible_env.HOME }}/.local/share/pyadm/repo.git'
      register: pyadmrepostat
    - name: Make pyadm directory
      file:
        path: '{{ ansible_env.HOME }}/.local/share/pyadm'
        state: directory
        mode: 0770
      when: pyadm_repo is defined and pyadmrepostat.stat.exists == False
    - name: pyadm clone
      command: 'yadm clone --checkout --yadm-dir {{ ansible_env.HOME }}/.local/share/pyadm --yadm-data {{ ansible_env.HOME }}/.local/share/pyadm {{ pyadm_repo }}'
      when: pyadm_repo is defined and pyadmrepostat.stat.exists == False
      args:
        creates: '{{ ansible_env.HOME }}/.local/share/pyadm/repo.git'
    - name: Reset pyadm
      command: 'pyadm reset --hard'
      when: pyadm_repo is defined and pyadmrepostat.stat.exists == False
  tags: yadm

# ssh lockdown
- name: Disable Password Authentication
  become: yes
  become_method: sudo
  lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication no"
        state: present
        backup: yes
        validate: /usr/sbin/sshd -t -f %s
  notify:
  - restart ssh

- name: Disable ChallengeResponse Authentication
  become: yes
  become_method: sudo
  lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^ChallengeResponseAuthentication'
        line: "ChallengeResponseAuthentication no"
        state: present
        backup: yes
        validate: /usr/sbin/sshd -t -f %s
  notify:
  - restart ssh

- name: Disable Root Login
  become: yes
  become_method: sudo
  lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: "PermitRootLogin no"
        state: present
        backup: yes
        validate: /usr/sbin/sshd -t -f %s
  notify:
    - restart ssh

- name: SSD trim
  become: yes
  become_method: sudo
  service:
      name=fstrim.timer
      enabled=yes

# Will fail if remote installed but not enabled until
# https://github.com/ansible-collections/community.general/pull/5926 is
# available
- name: Add the flathub flatpak remote
  become: yes
  become_method: sudo
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: system

- name: Install the flatpaks from flathub for current user
  block:
    - name: Define flatpaks to install
      ansible.builtin.set_fact:
        flatpaks:
          - name: org.inkscape.Inkscape
          - name: org.keepassxc.KeePassXC
          - name: org.libreoffice.LibreOffice
          - name: org.zotero.Zotero
            theme: true
          - name: org.gnome.Extensions
          - name: org.pulseaudio.pavucontrol
            theme: true
        flatpak_theme: "Adwaita:Dark"
    - name: 'Install flatpaks'
      community.general.flatpak:
        name: '{{ item.name }}'
        state: present
        remote: flathub
      loop: "{{ flatpaks }}"
    - name: Find flatpaks that need theming
      command:
        cmd: 'flatpak override --user --show {{ item.name }}'
      register: flatpak_overrides
      loop: "{{ flatpaks }}"
      changed_when: false
    - name: 'Override flatpak themes'
      ansible.builtin.command:
        cmd: 'flatpak override --user --env=GTK_THEME={{ flatpak_theme }} {{ item[0].name }}'
      when: 'item[0].get("theme") and flatpak_theme not in item[1].stdout'
      loop: "{{ flatpaks | zip(flatpak_overrides.results) | list }}"

- name: Install firefox flatpak
  block:
    - name: Install firefox
      community.general.flatpak:
        name: org.mozilla.firefox
        state: present
        remote: flathub
    # Here we mangle the runtime name of Firefox into the ffmpeg runtime form
    # in order to match the version number
    - name: Look up Firefox runtime
      command: flatpak info org.mozilla.firefox --show-runtime
      register: firefox_runtime
    - name: Install ffmpeg for firefox
      community.general.flatpak:
        name: "{{ firefox_runtime.stdout|replace('org.freedesktop.Platform','runtime/org.freedesktop.Platform.ffmpeg-full')}}"
        remote: flathub
        state: present
    - name: Firefox flatpak as default browser
      ansible.builtin.command:
        cmd: xdg-settings set default-web-browser org.mozilla.firefox.desktop

- name: Provision a development container
  block:
    - name: Check for container existence
      ansible.builtin.command: 'podman container inspect {{ devcontainer_name }}'
      changed_when: False
      register: devcontainer_status
      failed_when:
        - devcontainer_status.rc != 0
        - '"no such container"  not in devcontainer_status.stderr'
    - name: Create dev container
      # Could put more arguments here, but defaulting to the host Fedora version is fine
      ansible.builtin.command: 'toolbox --assumeyes create {{ devcontainer_name }}'
      when: devcontainer_status.rc != 0

# - name: Set up gnome settings
- name: dark theme
  community.general.dconf:
    key: "/org/gnome/desktop/interface/color-scheme"
    value: "'prefer-dark'"
    state: present

- name: caps lock
  community.general.dconf:
    key: "/org/gnome/desktop/input-sources/xkb-options"
    value: "['caps:ctrl_modifier']"
    state: present

- name: touchpad
  community.general.dconf:
    key: "/org/gnome/desktop/peripherals/touchpad/{{ item.key }}"
    value: "{{ item.value }}"
    state: present
  loop:
    - key: "'tap-to-click'"
      value: true
    - key: "'two-finger-scrolling-enabledg"
      value: true

# Services
- name: local http server
  ansible.builtin.systemd:
    name: localhttp
    state: started
    enabled: true
    scope: user

- name: Rootless docker
  block:
    - name: Create docker bin directory
      ansible.builtin.file:
        path: '{{ docker_bin_path }}'
        state: directory
        mode: u=rwx

    - name: Create docker plugin directory
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.docker/cli-plugins'
        state: directory
        mode: u=rwx

    - name: Check if docker binaries already present
      stat:
        path: '{{ docker_bin_path }}/docker'
      register: dockerbinstat

    - name: Download docker core
      ansible.builtin.unarchive:
        src: 'https://download.docker.com/linux/static/stable/x86_64/docker-{{ docker_version }}.tgz'
        dest: '{{ docker_bin_path }}'
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: dockerbinstat.stat.exists == False

    - name: Download docker rootless extras
      ansible.builtin.unarchive:
        src: 'https://download.docker.com/linux/static/stable/x86_64/docker-rootless-extras-{{ docker_version }}.tgz'
        dest: '{{ docker_bin_path }}'
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: dockerbinstat.stat.exists == False

    - name: Check if docker buildx binary already present
      stat:
        path: '{{ ansible_env.HOME }}/.docker/cli-plugins/docker-buildx'
      register: buildxstat

    - name: Download buildx
      ansible.builtin.get_url:
        url: https://github.com/docker/buildx/releases/download/v{{ docker_buildx_version }}/buildx-v{{ docker_buildx_version }}.linux-amd64
        dest: '{{ ansible_env.HOME }}/.docker/cli-plugins/docker-buildx'
        mode: 0750
      when: buildxstat.stat.exists == False

    - name: Find docker binaries
      ansible.builtin.find:
        paths: '{{ docker_bin_path }}'
      register: docker_binaries

    - name: Link docker binaries into PATH
      ansible.builtin.file:
        src: '{{ item.path }}'
        path: '{{ ansible_env.HOME }}/bin/{{ item.path | basename }}'
        state: link
      loop: "{{ docker_binaries.files | selectattr('xusr') }}"

    - name: Install docker service
      ansible.builtin.template:
        src: docker_rootless.service.j2
        dest: '{{ ansible_env.HOME }}/.config/systemd/user/docker_rootless.service'

    - name: Start docker
      ansible.builtin.systemd:
        name: docker_rootless
        state: started
        enabled: true
        scope: user
  tags: docker


# - name: Set up gnome terminal
# > [org/gnome/terminal/legacy/profiles:]
# > default='798fbb90-70d3-4130-ab9f-12b5c4aafe3c'
# > list=['b1dcc9dd-5262-4d8d-a863-c897e6d979b9', '798fbb90-70d3-4130-ab9f-12b5c4aafe3c']
# > 
# > [org/gnome/terminal/legacy/profiles:/:798fbb90-70d3-4130-ab9f-12b5c4aafe3c]
# > background-color='rgb(0,43,54)'
# > foreground-color='rgb(131,148,150)'
# > use-theme-colors=false
# > visible-name='solarized'
 

